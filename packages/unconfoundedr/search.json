[{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Diogo Ribeiro Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ribeiro Diogo. Author, maintainer.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Diogo R (2025). unconfoundedr: Test Unconfoundedness Comparing RCT Observational Effects. R package version 0.1.0, https://diogoribeiro7.github.io/packages/unconfoundedr/.","code":"@Manual{,   title = {unconfoundedr: Test Unconfoundedness by Comparing RCT and Observational Effects},   author = {Ribeiro Diogo},   year = {2025},   note = {R package version 0.1.0},   url = {https://diogoribeiro7.github.io/packages/unconfoundedr/}, }"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"unconfoundedr","dir":"","previous_headings":"","what":"unconfoundedr","title":"unconfoundedr","text":"Test (un)confoundedness comparing effect RCT-like dataset estimand observational dataset. Supports IPW/AIPW, bootstrap CIs, Wald test, optional transportability weighting (manual auto-detected via KS/energy tests).","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"why-this-package","dir":"","previous_headings":"","what":"Why this package","title":"unconfoundedr","text":"running full causal workflow observational data, ’s useful check whether estimand agrees randomized trial (trial-like slice) observational cohort. effects differ beyond sampling error, evidence ignorability observational analysis (transportability failure). package implements comparison practical estimators robust inference.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"unconfoundedr","text":"Estimators: IPW AIPW (doubly robust) marginal ATE (risk difference binary outcomes). Inference: percentile bootstrap CI difference Δ = ω_obs − ω_rct; Wald test (AIPW uses variance transport weighting applied). Transportability weighting: transport = \"none\": reweighting (default). transport = \"rct_to_obs\": reweight RCT OBS covariate mix via density-ratio logistic model. transport = \"auto\": run shift tests (univariate KS BH correction /multivariate energy test) reweight shift detected. Stability tools: stabilized weights, quantile trimming, positivity diagnostics, transport weights’ effective sample size (ESS).","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"unconfoundedr","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"yourname/unconfoundedr\")  # Optional for multivariate shift testing in transport = \"auto\" install.packages(\"energy\")"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"unconfoundedr","text":"","code":"library(unconfoundedr) set.seed(42)  # Simulate an RCT-like dataset n_r <- 800 X1 <- rnorm(n_r); X2 <- rbinom(n_r, 1, 0.4) A_r <- rbinom(n_r, 1, 0.5)    # randomized Y0_r <- 0.5 + 0.5*X1 + 0.3*X2 + rnorm(n_r) Y1_r <- Y0_r + 1.0 rct_df <- data.frame(Y = ifelse(A_r==1, Y1_r, Y0_r), A = A_r, X1, X2)  # Simulate an observational dataset (with covariate shift) n_o <- 2000 X1 <- rnorm(n_o, 0.4); X2 <- rbinom(n_o, 1, 0.7) A_o <- rbinom(n_o, 1, plogis(-0.2 + 0.8*X1 + 0.6*X2)) U   <- rnorm(n_o) Y0_o <- 0.5 + 0.5*X1 + 0.3*X2 + 0.3*U + rnorm(n_o) Y1_o <- Y0_o + 1.0 obs_df <- data.frame(Y = ifelse(A_o==1, Y1_o, Y0_o), A = A_o, X1, X2)  # Compare effects with auto transport detection out <- unconfoundedness_test(   data_rct  = rct_df,   data_obs  = obs_df,   formula   = Y ~ A + X1 + X2,  # A must be the first RHS term   estimator = \"aipw\",   family_y  = \"gaussian\",   transport = \"auto\",           # \"none\" | \"rct_to_obs\" | \"auto\"   auto_method = \"both\",         # \"ks\" | \"energy\" | \"both\"   auto_alpha  = 0.01,   B = 500,   seed = 42 )  print(out) out$summary out$diagnostics$auto       # KS/energy decision details out$diagnostics$transport  # weight ranges and ESS when applied"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"apihigh-level","dir":"","previous_headings":"","what":"API(high-level)","title":"unconfoundedr","text":"","code":"unconfoundedness_test(   data_rct, data_obs, formula,   estimator = c(\"aipw\",\"ipw\"),   stabilize = TRUE,   trim = c(0.01, 0.99),   family_y = c(\"gaussian\",\"binomial\"),   transport = c(\"none\",\"rct_to_obs\",\"auto\"),   auto_method = c(\"both\",\"ks\",\"energy\"),   auto_alpha = 0.01,   auto_energy_R = 199L,   B = 1000L,   alpha = 0.05,   seed = NULL )"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"interpretation--tips","dir":"","previous_headings":"","what":"Interpretation & tips","title":"unconfoundedr","text":"Null. H0: ω_obs = ω_rct (risk-difference scale). Failure reject supports ignorability comparability assumptions. Rejection. unmeasured confounding, bad controls, transportability failure. Inspect diagnostics. Positivity. Large extreme-PS shares tiny transport ESS → increase trimming adjust covariates. Speed. Lower B prototype; use B >= 500 final. Reproducibility. Set seed.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"unconfoundedr","text":"MIT. See LICENSE.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"unconfoundedr","text":"Please cite unconfoundedr underlying paper benchmark . See CITATION.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/print.unconf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for unconf_test objects — print.unconf_test","title":"Print method for unconf_test objects — print.unconf_test","text":"Print method unconf_test objects","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/print.unconf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for unconf_test objects — print.unconf_test","text":"","code":"# S3 method for class 'unconf_test' print(x, ...)"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/print.unconf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for unconf_test objects — print.unconf_test","text":"x object class unconf_test. ... Passed methods (unused).","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/print.unconf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for unconf_test objects — print.unconf_test","text":"Invisibly returns x.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/unconfoundedness_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","title":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","text":"Compare marginal treatment effect ω RCT-like dataset estimand observational dataset. Supports: Estimators: IPW AIPW (doubly robust). Inference: bootstrap CI Δ = ω_obs − ω_rct; Wald-style z test. Transport weighting: \"none\": reweighting; \"rct_to_obs\": always reweight RCT OBS covariates via density ratio logistic; \"auto\": run shift tests (KS/energy) reweight shift detected.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/unconfoundedness_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","text":"","code":"unconfoundedness_test(   data_rct,   data_obs,   formula,   estimator = c(\"aipw\", \"ipw\"),   stabilize = TRUE,   trim = c(0.01, 0.99),   family_y = c(\"gaussian\", \"binomial\"),   transport = c(\"none\", \"rct_to_obs\", \"auto\"),   auto_method = c(\"both\", \"ks\", \"energy\"),   auto_alpha = 0.01,   auto_energy_R = 199L,   B = 1000L,   alpha = 0.05,   seed = NULL )"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/unconfoundedness_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","text":"data_rct, data_obs data.frame Y/definitions covariates. formula model formula Y ~ + X1 + X2. must binary first RHS term. estimator \"aipw\" (default) \"ipw\". stabilize logical; stabilized IPW (default TRUE). trim length-2 numeric 0,1 weight trimming (e.g., c(0.01,0.99)); NULL disables. family_y \"gaussian\" \"binomial\" (AIPW outcome regression checks). transport \"none\", \"rct_to_obs\", \"auto\" (default \"none\"). auto_method tests use transport=\"auto\": \"\" (default), \"ks\", \"energy\". auto_alpha significance level shift tests (default 0.01). auto_energy_R number permutations energy test (default 199). Ignored energy installed. B bootstrap replicates Δ CI (default 1000). alpha CI tail (default 0.05 95% CI). seed RNG seed NULL.","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/unconfoundedness_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","text":"list estimates, CI, p-values, settings, diagnostics (incl. auto decision).","code":""},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/reference/unconfoundedness_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test unconfoundedness with optional transport weighting (auto/KS/energy) — unconfoundedness_test","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(1) gen_rct <- function(n){   X1 <- rnorm(n); X2 <- rbinom(n,1,0.4)   A  <- rbinom(n,1,0.5)   Y0 <- 0.5 + 0.5*X1 + 0.3*X2 + rnorm(n)   Y1 <- Y0 + 1.0   data.frame(Y=ifelse(A==1,Y1,Y0),A,X1,X2) } gen_obs <- function(n){   X1 <- rnorm(n, 0.4); X2 <- rbinom(n,1,0.7)  # shift   A  <- rbinom(n,1,plogis(-0.2 + 0.8*X1 + 0.6*X2))   U  <- rnorm(n)   Y0 <- 0.5 + 0.5*X1 + 0.3*X2 + 0.3*U + rnorm(n)   Y1 <- Y0 + 1.0   data.frame(Y=ifelse(A==1,Y1,Y0),A,X1,X2) } d_rct <- gen_rct(800); d_obs <- gen_obs(2000) out <- unconfoundedness_test(d_rct, d_obs, Y ~ A + X1 + X2,   estimator=\"aipw\", family_y=\"gaussian\",   transport=\"auto\", auto_method=\"both\", auto_alpha=0.01,   B=500, seed=42) print(out); out$diagnostics$auto } # }"},{"path":"https://diogoribeiro7.github.io/packages/unconfoundedr/news/index.html","id":"unconfoundedr-010","dir":"Changelog","previous_headings":"","what":"unconfoundedr 0.1.0","title":"unconfoundedr 0.1.0","text":"Initial release: AIPW/IPW estimators, bootstrap CI, Wald test, transport modes (none, rct_to_obs, auto KS/energy), diagnostics, vignette.","code":""}]
